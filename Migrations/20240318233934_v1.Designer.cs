// <auto-generated />
using System;
using IP_AmazonFreshIndia_Project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IP_AmazonFreshIndia_Project.Migrations
{
	[DbContext(typeof(IP_AmazonFreshIndia_ProjectContext))]
	[Migration("20240318233934_v1")]
	partial class v1
	{
		/// <inheritdoc />
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.Category", b =>
				{
					b.Property<int>("CategoryId")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(200)
						.HasColumnType("TEXT");

					b.HasKey("CategoryId");

					b.ToTable("Categories");

					b.HasData(
						new
						{
							CategoryId = 1,
							Name = "Groceries"
						},
						new
						{
							CategoryId = 2,
							Name = "Pharmacy"
						},
						new
						{
							CategoryId = 3,
							Name = "Clothing"
						},
						new
						{
							CategoryId = 4,
							Name = "Electronics"
						});
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.Product", b =>
				{
					b.Property<int>("ProductId")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<int?>("Code")
						.HasColumnType("INTEGER");

					b.Property<string>("Description")
						.HasColumnType("TEXT");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("TEXT");

					b.Property<double>("Price")
						.HasColumnType("REAL");

					b.Property<int?>("Quantity")
						.HasColumnType("INTEGER");

					b.Property<string>("Vendor")
						.HasColumnType("TEXT");

					b.Property<string>("WarehouseId")
						.HasColumnType("TEXT");

					b.HasKey("ProductId");

					b.HasIndex("WarehouseId");

					b.ToTable("Products");

					b.HasData(
						new
						{
							ProductId = 1,
							Name = "Eggs",
							Price = 4.29,
							WarehouseId = "chicago"
						},
						new
						{
							ProductId = 2,
							Name = "Bread",
							Price = 2.5,
							WarehouseId = "newyork"
						},
						new
						{
							ProductId = 3,
							Name = "Dish Liquid",
							Price = 5.5,
							WarehouseId = "losangles"
						},
						new
						{
							ProductId = 4,
							Name = "Tylenol",
							Price = 9.5,
							WarehouseId = "chicago"
						},
						new
						{
							ProductId = 5,
							Name = "Shirt",
							Price = 23.989999999999998,
							WarehouseId = "washingtondc"
						},
						new
						{
							ProductId = 6,
							Name = "Claritin",
							Price = 15.19,
							WarehouseId = "chicago"
						},
						new
						{
							ProductId = 7,
							Name = "Pant",
							Price = 29.25,
							WarehouseId = "chicago"
						},
						new
						{
							ProductId = 8,
							Name = "Mobile Phones",
							Price = 499.99000000000001,
							WarehouseId = "newyork"
						},
						new
						{
							ProductId = 9,
							Name = "Smart Watch",
							Price = 149.99000000000001,
							WarehouseId = "chicago"
						},
						new
						{
							ProductId = 10,
							Name = "NyQuill",
							Price = 5.5899999999999999,
							WarehouseId = "chicago"
						});
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.ProductCategory", b =>
				{
					b.Property<int>("ProductId")
						.HasColumnType("INTEGER");

					b.Property<int>("CategoryId")
						.HasColumnType("INTEGER");

					b.HasKey("ProductId", "CategoryId");

					b.HasIndex("CategoryId");

					b.ToTable("ProductCategories");

					b.HasData(
						new
						{
							ProductId = 1,
							CategoryId = 1
						},
						new
						{
							ProductId = 2,
							CategoryId = 1
						},
						new
						{
							ProductId = 3,
							CategoryId = 1
						},
						new
						{
							ProductId = 4,
							CategoryId = 2
						},
						new
						{
							ProductId = 5,
							CategoryId = 3
						},
						new
						{
							ProductId = 6,
							CategoryId = 2
						},
						new
						{
							ProductId = 7,
							CategoryId = 3
						},
						new
						{
							ProductId = 8,
							CategoryId = 4
						},
						new
						{
							ProductId = 9,
							CategoryId = 4
						},
						new
						{
							ProductId = 10,
							CategoryId = 2
						});
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.User", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("TEXT");

					b.Property<int>("AccessFailedCount")
						.HasColumnType("INTEGER");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("TEXT");

					b.Property<string>("Email")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("INTEGER");

					b.Property<string>("Firstname")
						.HasColumnType("TEXT");

					b.Property<string>("Lastname")
						.HasColumnType("TEXT");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("INTEGER");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("TEXT");

					b.Property<string>("NormalizedEmail")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.Property<string>("NormalizedUserName")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.Property<string>("PasswordHash")
						.HasColumnType("TEXT");

					b.Property<string>("PhoneNumber")
						.HasColumnType("TEXT");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("INTEGER");

					b.Property<string>("SecurityStamp")
						.HasColumnType("TEXT");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("INTEGER");

					b.Property<string>("UserName")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasDatabaseName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasDatabaseName("UserNameIndex");

					b.ToTable("AspNetUsers", (string)null);
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.Warehouse", b =>
				{
					b.Property<string>("WarehouseId")
						.HasMaxLength(10)
						.HasColumnType("TEXT");

					b.Property<int>("Code")
						.HasColumnType("INTEGER");

					b.Property<string>("ContactPerson")
						.HasMaxLength(25)
						.HasColumnType("TEXT");

					b.Property<string>("Email")
						.HasMaxLength(25)
						.HasColumnType("TEXT");

					b.Property<string>("Location")
						.HasMaxLength(25)
						.HasColumnType("TEXT");

					b.Property<string>("Name")
						.IsRequired()
						.HasMaxLength(25)
						.HasColumnType("TEXT");

					b.Property<string>("Phone")
						.HasMaxLength(25)
						.HasColumnType("TEXT");

					b.HasKey("WarehouseId");

					b.ToTable("Warehouses");

					b.HasData(
						new
						{
							WarehouseId = "chicago",
							Code = 1234,
							Name = "Chicago"
						},
						new
						{
							WarehouseId = "newyork",
							Code = 4321,
							Name = "New York"
						},
						new
						{
							WarehouseId = "losangles",
							Code = 5678,
							Name = "Los Angles"
						},
						new
						{
							WarehouseId = "washingtondc",
							Code = 8765,
							Name = "Washington DC"
						});
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("TEXT");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("TEXT");

					b.Property<string>("Name")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.Property<string>("NormalizedName")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasDatabaseName("RoleNameIndex");

					b.ToTable("AspNetRoles", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("ClaimType")
						.HasColumnType("TEXT");

					b.Property<string>("ClaimValue")
						.HasColumnType("TEXT");

					b.Property<string>("RoleId")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("ClaimType")
						.HasColumnType("TEXT");

					b.Property<string>("ClaimValue")
						.HasColumnType("TEXT");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasColumnType("TEXT");

					b.Property<string>("ProviderKey")
						.HasColumnType("TEXT");

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("TEXT");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("TEXT");

					b.Property<string>("RoleId")
						.HasColumnType("TEXT");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("TEXT");

					b.Property<string>("LoginProvider")
						.HasColumnType("TEXT");

					b.Property<string>("Name")
						.HasColumnType("TEXT");

					b.Property<string>("Value")
						.HasColumnType("TEXT");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens", (string)null);
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.Product", b =>
				{
					b.HasOne("IP_AmazonFreshIndia_Project.Models.Warehouse", "Warehouse")
						.WithMany("Products")
						.HasForeignKey("WarehouseId")
						.OnDelete(DeleteBehavior.Restrict);

					b.Navigation("Warehouse");
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.ProductCategory", b =>
				{
					b.HasOne("IP_AmazonFreshIndia_Project.Models.Category", "Category")
						.WithMany("ProductCategories")
						.HasForeignKey("CategoryId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("IP_AmazonFreshIndia_Project.Models.Product", "Product")
						.WithMany("ProductCategories")
						.HasForeignKey("ProductId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Category");

					b.Navigation("Product");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.HasOne("IP_AmazonFreshIndia_Project.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.HasOne("IP_AmazonFreshIndia_Project.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("IP_AmazonFreshIndia_Project.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.HasOne("IP_AmazonFreshIndia_Project.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.Category", b =>
				{
					b.Navigation("ProductCategories");
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.Product", b =>
				{
					b.Navigation("ProductCategories");
				});

			modelBuilder.Entity("IP_AmazonFreshIndia_Project.Models.Warehouse", b =>
				{
					b.Navigation("Products");
				});
#pragma warning restore 612, 618
		}
	}
}
