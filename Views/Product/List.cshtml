@model ProductListViewModel

@{
    ViewData["Name"] = " | Product Catalog";

    // aliases to make paging, sorting, and filtering code shorter
    RouteDictionary current = Model.CurrentRoute;
    RouteDictionary routes = Model.CurrentRoute.Clone();

    // create culture variable
    var culture = System.Globalization.CultureInfo
        .CreateSpecificCulture("en-US");
}

<br />

<h1>Products</h1>

@* filter form *@
<form asp-action="Filter" method="post" class="form-inline">
    <label>Category: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Categories, "CategoryId", "Name", current.CategoryFilter))">
        <option value="@ProductsGridDTO.DefaultFilter">All</option>
    </select>

    <label>Warehouse: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Warehouses, "WarehouseId", "Name", current.WarehouseFilter))">
        <option value="@ProductsGridDTO.DefaultFilter">All</option>
    </select>

    <label>Price: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Prices, "Key", "Value", current.PriceFilter))">
        <option value="@ProductsGridDTO.DefaultFilter">All</option>
    </select>

    <button type="submit" class="btn btn-primary btn-sm mr-2">Filter</button>
    <button type="submit" class="btn btn-primary btn-sm"
            name="clear" value="true">
        Clear
    </button>
</form>

@* add to cart form *@
<form asp-action="Add" asp-controller="Cart" method="post">
    <table class="table">
        @* for each table column, update the route dictionary with the field to sort by, and then use
            that route dictionary and the current route to create route segments for sorting link *@
        <thead class="thead-primary">
            <tr>
                <th>
                    @{
                        routes.SetSortAndDirection(nameof(Product.Name), current);
                    }
                    <a asp-action="List" asp-all-route-data="@routes"
                       class="text-dark">Product Name</a>
                </th>
                <th>
                    Category(s)
                </th>
                <th>
                    @{
                        routes.SetSortAndDirection(nameof(Warehouse), current);
                    }
                    <a asp-action="List" asp-all-route-data="@routes"
                       class="text-dark">Warehouse</a>
                </th>
                <th>
                    @{
                        routes.SetSortAndDirection(nameof(Product.Price), current);
                    }
                    <a asp-action="List" asp-all-route-data="@routes"
                       class="text-dark">Price</a>
                </th>
                  <th>Image</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Product product in Model.Products)
            {
                        <tr>
                            <td>
                                <a asp-action="Details" asp-route-id="@product.ProductId"
                                    asp-route-slug="@product.Name.Slug()">
                            @product.Name
                                </a>
                            </td>
                            <td>
                        @foreach (var ba in product.ProductCategories)
                        {
                                                    <p>
                                                        <a asp-action="Details" asp-controller="Category"
                                                            asp-route-id="@ba.CategoryId"
                                                            asp-route-slug="@ba.Category.Name.Slug()">
                                    @ba.Category.Name
                                                        </a>
                                                    </p>
                        }
                            </td>
                            <td>@product.Warehouse?.Name</td>
                            <td>@product.Price.ToString("c", culture)</td>
                                <td>
                        @if (!string.IsNullOrEmpty(product.ProductImage))
                        {
                            <img src="@product.ProductImage" alt="Product Image" style="max-width: 100px; max-height: 100px;" />
                        }
                        else
                        {
                            <p>No image available</p>
                        }
                        </td>
                            <td>
                                <button type="submit" name="id" value="@product.ProductId"
                                        class="btn btn-primary btn-sm">
                                    Add To Cart
                                </button>
                            </td>
                        </tr>
            }
        </tbody>
    </table>
</form>

@* paging links *@
@{
    @* Reset the route dictionary to the current route values. This is necessary
        to clear the changes made while creating the sorting links above. Clone so
        don't overwrite current route segment values. *@
    routes = Model.CurrentRoute.Clone();

    @* update route dictionary with page number in 'i' and then use
        updated route dictionary to create route segments for paging link.*@
    for (int i = 1; i <= Model.TotalPages; i++)
    {
        routes.PageNumber = i;
                                        <a asp-action="List" asp-all-route-data="@routes"
                                            class="btn btn-outline-primary @Nav.Active(i, current.PageNumber)">@i</a>
    }
}
